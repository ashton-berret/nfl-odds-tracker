generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Team {
  id            String   @id @default(cuid())
  name          String   @unique  // "San Francisco 49ers"
  abbreviation  String @unique  // "SF"
  createdAt     DateTime @default(now())

  players       Player[]
  homeGames     Game[] @relation("HomeTeam")
  awayGames     Game[] @relation("AwayTeam")
}

model Player {
  id        String   @id @default(cuid())
  name      String   // "Christian McCaffrey"
  position  String   // "RB", "WR", "QB", etc.
  teamId    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id])
  props     PlayerProp[]

  @@unique([name, teamId])  // Same name can exist on different teams
  @@index([name])
}

model PlayerTeamMapping {
    id              String @id @default(cuid())
    playerName      String
    teamName        String
    position        String?
    jerseyNumber    String?
    active          Boolean @default(true)
    lastUpdated     DateTime @default(now()) @updatedAt

    @@unique([playerName, teamName])
    @@index([playerName])
    @@index([teamName])
}

model Game {
  id            String   @id @default(cuid())
  externalId    String?  @unique  // ID from odds API
  homeTeamId    String
  awayTeamId    String
  commenceTime   DateTime
  completed     Boolean  @default(false)
  homeScore     Int?
  awayScore     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  homeTeam      Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam      Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  playerProps   PlayerProp[]

  @@index([commenceTime])
}

model Sportsbook {
  id        String   @id @default(cuid())
  name      String   @unique  // "DraftKings", "FanDuel"
  key       String   @unique  // "draftkings", "fanduel" (API identifier)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  propOdds  PropOdds[]
  bets      Bet[]
}

model PlayerProp {
  id            String   @id @default(cuid())
  gameId        String
  playerId      String
  propType      String   // "rushing_yds", "receiving_yds", "pass_yds", "pass_tds", etc.
  line          Float    // The over/under number (e.g., 85.5 receiving yards)
  createdAt     DateTime @default(now())

  game          Game       @relation(fields: [gameId], references: [id])
  player        Player     @relation(fields: [playerId], references: [id])
  propOdds      PropOdds[]
  bets          Bet[]

  @@unique([gameId, playerId, propType, line])  // One prop per game/player/type/line combo
  @@index([gameId])
  @@index([playerId])
}

model PropOdds {
  id            String   @id @default(cuid())
  propId        String
  sportsbookId  String
  overOdds      Int      // American odds for OVER (e.g., -110)
  underOdds     Int      // American odds for UNDER (e.g., -110)
  fetchedAt     DateTime @default(now())

  prop          PlayerProp @relation(fields: [propId], references: [id])
  sportsbook    Sportsbook @relation(fields: [sportsbookId], references: [id])

  @@index([propId, sportsbookId, fetchedAt])
}

// Optional: Track actual results for props
model PropResult {
  id            String   @id @default(cuid())
  propId        String   @unique
  actualValue   Float    // Actual yards/TDs the player achieved
  hit           Boolean  // Did it go over the line?
  recordedAt    DateTime @default(now())
}



// user and auth
model User {
    id              String @id @default(cuid())
    email           String @unique
    username        String @unique
    passwordHash    String // using bcrypt
    balance         Float @default(1000) // start with 1k
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    bets            Bet[]
    sessions        Session[]
}

model Session {
    id              String @id @default(cuid())
    userId          String
    expiresAt       DateTime
    createdAt       DateTime @default(now())

    user            User @relation(fields: [userId], references: [id], onDelete: Cascade) // delete all rows in children tables when parent row is deleted

    @@index([userId])
}

model Bet {
    id              String @id @default(cuid())
    userId          String
    propId          String
    sportsbookId    String

    // bet details
    side            String // over or under
    amount          Float
    odds            Int

    // settlement after game completes
    status          String @default("pending")
    profit          Float?

    placedAt        DateTime @default(now())
    settledAt       DateTime?

    user            User @relation(fields: [userId], references: [id])
    prop            PlayerProp @relation(fields: [propId], references: [id])
    sportsbook      Sportsbook @relation(fields: [sportsbookId], references: [id])

    @@index([userId])
    @@index([propId])
    @@index([status])
}
